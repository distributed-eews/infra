version: '3'
services:
  eews-zookeeper:
    restart: always
    image: confluentinc/cp-zookeeper
    container_name: eews-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  eews-kafka:
    restart: always
    container_name: eews-kafka
    image: confluentinc/cp-kafka
    depends_on:
      - eews-zookeeper
    ports:
      - '8097:8097'

    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'eews-zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://eews-kafka:9092,PLAINTEXT_HOST://localhost:8097
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_MIN_INSYNC_REPLICAS: '1'

  eews-init-kafka:
    container_name: eews-init-kafka
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - eews-kafka
    entrypoint: ['/bin/sh', '-c']
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server eews-kafka:9092 --list
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server eews-kafka:9092 --create --if-not-exists --topic preprocessed --replication-factor 1 --partitions 3 --config retention.ms=300000 --config retention.bytes=104857600
      kafka-topics --bootstrap-server eews-kafka:9092 --create --if-not-exists --topic p_arrival --replication-factor 1 --partitions 3 --config retention.ms=300000 --config retention.bytes=104857600
      kafka-topics --bootstrap-server eews-kafka:9092 --create --if-not-exists --topic pick --replication-factor 1 --partitions 3 --config retention.ms=300000 --config retention.bytes=104857600
      kafka-topics --bootstrap-server eews-kafka:9092 --alter --topic preprocessed --partitions 3
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server eews-kafka:9092 --list
      "

  # kafka-ui:
  #   image: provectuslabs/kafka-ui
  #   container_name: kafka-ui
  #   ports:
  #     - '8000:8080'
  #   restart: always
  #   depends_on:
  #     - eews-init-kafka
  #   environment:
  #     KAFKA_CLUSTERS_0_NAME: local
  #     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: eews-kafka:9092

  eews-redis:
    image: redis
    container_name: eews-redis
    volumes:
      - redis_data:/data

  eews-seeder:
    depends_on:
      - eews-redis
    image: pragusga/eews:seeder
    container_name: eews-seeder
    environment:
      REDIS_HOST: eews-redis
      # MODE: BKB
      # REPLICA: 3
      # ENV: TEST

  eews-producer:
    depends_on:
      # - eews-init-kafka
      - eews-seeder
      - eews-init-kafka
    # image: pragusga/eews:producer-tester
    image: pragusga/eews:producer
    container_name: eews-producer
    env_file:
      - .producer.env

  eews-queue-1:
    depends_on:
      - eews-init-kafka
    image: pragusga/eews:queue
    container_name: eews-queue-1
    env_file:
      - .queue.env

  eews-queue-2:
    depends_on:
      - eews-init-kafka
    image: pragusga/eews:queue
    container_name: eews-queue-2
    env_file:
      - .queue.env

  eews-queue-3:
    depends_on:
      - eews-init-kafka
    image: pragusga/eews:queue
    container_name: eews-queue-3
    env_file:
      - .queue.env

  eews-picker-1:
    depends_on:
      - eews-nginx
      - eews-mongo
    image: pragusga/eews:picker-zidan
    container_name: eews-picker-1
    env_file:
      - .picker.env

  eews-picker-2:
    depends_on:
      - eews-nginx
      - eews-mongo
    image: pragusga/eews:picker-zidan
    container_name: eews-picker-2
    env_file:
      - .picker.env

  eews-picker-3:
    depends_on:
      - eews-nginx
      - eews-mongo
    image: pragusga/eews:picker-zidan
    container_name: eews-picker-3
    env_file:
      - .picker.env

  eews-ml-1:
    image: pragusga/eews:ml
    container_name: eews-ml-1
    depends_on:
      - eews-redis
    env_file:
      - .ml.env

  eews-nginx:
    image: nginx
    container_name: eews-nginx
    volumes:
      - ./nginx2.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - eews-ml-1
      # - eews-ml-2

  eews-ws-rest:
    depends_on:
      - eews-producer
      - eews-seeder
      - eews-nginx
    image: pragusga/eews:ws-rest
    # build:
    #   context: ../ws-rest
    #   dockerfile: Dockerfile
    container_name: eews-ws-rest
    env_file:
      - .ws-rest.env
    ports:
      - '8080:8080'

  eews-prometheus:
    container_name: eews-prometheus
    image: prom/prometheus:v2.24.0
    volumes:
      - ./prometheus2/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: always
    ports:
      - '9090:9090'

  eews-grafana:
    image: grafana/grafana:latest
    container_name: eews-grafana
    ports:
      - '3001:3001'
    environment:
      GF_SERVER_HTTP_PORT: 3001
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: adminpassword
    volumes:
      - grafana-storage:/var/lib/grafana

  eews-mongo:
    image: mongo:latest
    container_name: eews-mongo
    volumes:
      - mongodb_data:/data/db

  eews-frontend:
    depends_on:
      - eews-ws-rest
    image: pragusga/eews:frontend
    # build:
    #   context: ../frontend
    #   dockerfile: Dockerfile
    container_name: eews-frontend
    env_file:
      - .frontend.env
    ports:
      - '80:3002'

volumes:
  grafana-storage:
  prometheus_data:
  mongodb_data:
  redis_data:
