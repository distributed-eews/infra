version: '3'
services:
  eews-zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: eews-zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  eews-kafka:
    container_name: eews-kafka
    image: confluentinc/cp-kafka
    depends_on:
      - eews-zookeeper
    ports:
      - '9092:9092'
    expose:
      - '29092'
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'eews-zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://eews-kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_MIN_INSYNC_REPLICAS: '1'

  eews-init-kafka:
    container_name: eews-init-kafka
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - eews-kafka
    entrypoint: ['/bin/sh', '-c']
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server eews-kafka:29092 --list
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server eews-kafka:29092 --create --if-not-exists --topic preprocessed --replication-factor 1 --partitions 3
      kafka-topics --bootstrap-server eews-kafka:29092 --create --if-not-exists --topic p_arrival --replication-factor 1 --partitions 3
      kafka-topics --bootstrap-server eews-kafka:29092 --create --if-not-exists --topic pick --replication-factor 1 --partitions 3
      kafka-topics --bootstrap-server eews-kafka:29092 --create --if-not-exists --topic prediction --replication-factor 1 --partitions 1
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server eews-kafka:29092 --list
      "

  eews-redis:
    image: redis
    container_name: eews-redis
    ports:
      - '6379:6379'

  eews-seeder:
    depends_on:
      - eews-redis
    image: pragusga/eews:seeder
    container_name: eews-seeder
    environment:
      REDIS_HOST: eews-redis

  eews-producer:
    depends_on:
      - eews-init-kafka
      - eews-seeder
    image: pragusga/eews:producer
    container_name: eews-producer
    env_file:
      - .producer.env
    ports:
      - '8082:8082'

  eews-queue:
    depends_on:
      - eews-init-kafka
    image: pragusga/eews:queue
    container_name: eews-queue
    env_file:
      - .queue.env

  eews-picker:
    depends_on:
      - eews-nginx
    image: pragusga/eews:picker
    # build:
    #   context: ../picker
    #   dockerfile: Dockerfile
    # volumes:
    #   - ../picker/app/processor.py:/app/app/processor.py
    container_name: eews-picker
    env_file:
      - .picker.env
    # networks:
    #   - eews

  eews-ps-arrival-1:
    image: pragusga/eews:ps-arrival
    container_name: eews-ps-arrival-1
    ports:
      - 8084:3000
    # networks:
    #   - eews

  eews-ps-arrival-2:
    image: pragusga/eews:ps-arrival
    container_name: eews-ps-arrival-2
    ports:
      - 8085:3000
    # networks:
    #   - eews

  eews-ps-arrival-3:
    image: pragusga/eews:ps-arrival
    container_name: eews-ps-arrival-3
    ports:
      - 8086:3000
    # networks:
    #   - eews

  eews-nginx:
    image: nginx
    container_name: eews-nginx
    ports:
      - '8083:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - eews-ps-arrival-1
      - eews-ps-arrival-2
      - eews-ps-arrival-3
    # networks:
    #   - eews

  eews-ws-rest:
    depends_on:
      - eews-producer
      - eews-seeder
    image: pragusga/eews:ws-rest
    container_name: eews-ws-rest
    env_file:
      - .ws-rest.env
    ports:
      - '8080:8080'
# networks:
#   eews:
